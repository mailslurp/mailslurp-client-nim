#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import json
import tables

import model_attachment_meta_data

type EventName* {.pure.} = enum
  EMAILRECEIVED
  NEWEMAIL
  NEWCONTACT
  NEWATTACHMENT

type WebhookNewEmailPayload* = object
  ## NEW_EMAIL webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to. Use the email ID to fetch the full email body or attachments.
  attachmentMetaDatas*: seq[AttachmentMetaData] ## List of attachment meta data objects if attachments present
  bcc*: seq[string] ## List of `BCC` recipients email was addressed to
  cc*: seq[string] ## List of `CC` recipients email was addressed to
  createdAt*: string ## Date time of event creation
  emailId*: string ## ID of the email that was received. Use this ID for fetching the email with the `EmailController`.
  eventName*: EventName ## Name of the event type webhook is being triggered for.
  `from`*: string ## Who the email was sent from
  inboxId*: string ## Id of the inbox that received an email
  messageId*: string ## Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
  subject*: string ## The subject line of the email message
  to*: seq[string] ## List of `To` recipients that email was addressed to
  webhookId*: string ## ID of webhook entity being triggered
  webhookName*: string ## Name of the webhook being triggered

func `%`*(v: EventName): JsonNode =
  let str = case v:
    of EventName.EMAILRECEIVED: "EMAIL_RECEIVED"
    of EventName.NEWEMAIL: "NEW_EMAIL"
    of EventName.NEWCONTACT: "NEW_CONTACT"
    of EventName.NEWATTACHMENT: "NEW_ATTACHMENT"

  JsonNode(kind: JString, str: str)

func `$`*(v: EventName): string =
  result = case v:
    of EventName.EMAILRECEIVED: "EMAIL_RECEIVED"
    of EventName.NEWEMAIL: "NEW_EMAIL"
    of EventName.NEWCONTACT: "NEW_CONTACT"
    of EventName.NEWATTACHMENT: "NEW_ATTACHMENT"
