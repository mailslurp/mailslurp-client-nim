#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import json
import tables

import model_email_analysis
import model_map

type Email* = object
  ## Email entity (also known as EmailDto). When an SMTP email message is received by MailSlurp it is parsed. The body and attachments are written to disk and the fields such as to, from, subject etc are stored in a database. The `body` contains the email content. If you want the original SMTP message see the `getRawEmail` endpoints. The attachments can be fetched using the AttachmentController
  analysis*: EmailAnalysis
  attachments*: seq[string] ## List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.
  bcc*: seq[string] ## List of `BCC` recipients email was addressed to
  body*: string ## The body of the email message
  bodyMD5Hash*: string ## A hash signature of the email message
  cc*: seq[string] ## List of `CC` recipients email was addressed to
  charset*: string ## Detected character set of the email body such as UTF-8
  createdAt*: string ## When was the email received by MailSlurp
  `from`*: string ## Who the email was sent from
  headers*: Table[string, string] ## Collection of SMTP headers attached to email
  id*: string ## ID of the email entity
  inboxId*: string ## ID of the inbox that received the email
  isHTML*: bool ## Is the email body HTML
  read*: bool ## Read flag. Has the email ever been viewed in the dashboard or fetched via the API? If so the email is marked as read.
  replyTo*: string ## The `replyTo` field on the received email message
  subject*: string ## The subject line of the email message
  teamAccess*: bool ## Can the email be accessed by organization team members
  to*: seq[string] ## List of `To` recipients that email was addressed to
  updatedAt*: string ## When was the email last updated
  userId*: string ## ID of user that email belongs to
