#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_byte_array
import ../models/model_export_link
import ../models/model_export_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc exportEntities*(httpClient: HttpClient, exportType: string, apiKey: string, outputFormat: string, filter: string, listSeparatorToken: string, excludePreviouslyExported: bool, createdEarliestTime: string, createdOldestTime: string): (Option[seq[ByteArray]], Response) =
  ## Export inboxes link callable via browser
  let query_for_api_call = encodeQuery([
    ("exportType", $exportType), # 
    ("apiKey", $apiKey), # 
    ("outputFormat", $outputFormat), # 
    ("filter", $filter), # 
    ("listSeparatorToken", $listSeparatorToken), # 
    ("excludePreviouslyExported", $excludePreviouslyExported), # 
    ("createdEarliestTime", $createdEarliestTime), # 
    ("createdOldestTime", $createdOldestTime), # 
  ])

  let response = httpClient.get(basepath & "/export" & "?" & query_for_api_call)
  constructResult[seq[ByteArray]](response)


proc getExportLink*(httpClient: HttpClient, exportType: string, ExportOptions: ExportOptions, apiKey: string): (Option[ExportLink], Response) =
  ## Get export link
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("exportType", $exportType), # 
    ("apiKey", $apiKey), # 
  ])

  let response = httpClient.post(basepath & "/export" & "?" & query_for_api_call, $(%ExportOptions))
  constructResult[ExportLink](response)

