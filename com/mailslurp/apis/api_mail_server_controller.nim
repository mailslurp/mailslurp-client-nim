#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_dns_lookup_options
import ../models/model_dns_lookup_results
import ../models/model_describe_domain_options
import ../models/model_describe_mail_server_domain_result
import ../models/model_email_verification_result
import ../models/model_ip_address_result
import ../models/model_verify_email_address_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc describeMailServerDomain*(httpClient: HttpClient, DescribeDomainOptions: DescribeDomainOptions): (Option[DescribeMailServerDomainResult], Response) =
  ## Get DNS Mail Server records for a domain
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/mail-server/describe/domain", $(%DescribeDomainOptions))
  constructResult[DescribeMailServerDomainResult](response)


proc getDnsLookup*(httpClient: HttpClient, DNSLookupOptions: DNSLookupOptions): (Option[DNSLookupResults], Response) =
  ## Lookup DNS records for a domain
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/mail-server/describe/dns-lookup", $(%DNSLookupOptions))
  constructResult[DNSLookupResults](response)


proc getIpAddress*(httpClient: HttpClient, name: string): (Option[IPAddressResult], Response) =
  ## Get IP address for a domain
  let query_for_api_call = encodeQuery([
    ("name", $name), # 
  ])

  let response = httpClient.post(basepath & "/mail-server/describe/ip-address" & "?" & query_for_api_call)
  constructResult[IPAddressResult](response)


proc verifyEmailAddress*(httpClient: HttpClient, VerifyEmailAddressOptions: VerifyEmailAddressOptions): (Option[EmailVerificationResult], Response) {.deprecated.} =
  ## Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/mail-server/verify/email-address", $(%VerifyEmailAddressOptions))
  constructResult[EmailVerificationResult](response)

