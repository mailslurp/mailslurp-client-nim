#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_template_options
import ../models/model_page_template_projection
import ../models/model_template_dto
import ../models/model_template_projection

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createTemplate*(httpClient: HttpClient, createTemplateOptions: CreateTemplateOptions): (Option[TemplateDto], Response) =
  ## Create a Template
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/templates", $(%createTemplateOptions))
  constructResult[TemplateDto](response)


proc deleteTemplate*(httpClient: HttpClient, templateId: string): Response =
  ## Delete Template
  httpClient.delete(basepath & fmt"/templates/{templateId}")


proc getAllTemplates*(httpClient: HttpClient, before: string, page: int, since: string, size: int, sort: string): (Option[PageTemplateProjection], Response) =
  ## Get all Templates in paginated format
  let query_for_api_call = encodeQuery([
    ("before", $before), # Filter by created at before the given timestamp
    ("page", $page), # Optional page index in list pagination
    ("since", $since), # Filter by created at after the given timestamp
    ("size", $size), # Optional page size in list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & "/templates/paginated" & "?" & query_for_api_call)
  constructResult[PageTemplateProjection](response)


proc getTemplate*(httpClient: HttpClient, templateId: string): (Option[TemplateDto], Response) =
  ## Get Template

  let response = httpClient.get(basepath & fmt"/templates/{templateId}")
  constructResult[TemplateDto](response)


proc getTemplates*(httpClient: HttpClient): (Option[seq[TemplateProjection]], Response) =
  ## Get all Templates

  let response = httpClient.get(basepath & "/templates")
  constructResult[seq[TemplateProjection]](response)


proc updateTemplate*(httpClient: HttpClient, templateId: string, createTemplateOptions: CreateTemplateOptions): (Option[TemplateDto], Response) =
  ## Update a Template
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/templates/{templateId}", $(%createTemplateOptions))
  constructResult[TemplateDto](response)

