#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_inbox_ruleset_options
import ../models/model_inbox_ruleset_dto
import ../models/model_inbox_ruleset_test_options
import ../models/model_inbox_ruleset_test_result
import ../models/model_page_inbox_ruleset_dto
import ../models/model_test_inbox_ruleset_receiving_options
import ../models/model_test_inbox_ruleset_receiving_result
import ../models/model_test_inbox_ruleset_sending_options
import ../models/model_test_inbox_ruleset_sending_result
import ../models/model_test_new_inbox_ruleset_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createNewInboxRuleset*(httpClient: HttpClient, CreateInboxRulesetOptions: CreateInboxRulesetOptions, inboxId: string): (Option[InboxRulesetDto], Response) =
  ## Create an inbox ruleset
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Inbox id to attach ruleset to
  ])

  let response = httpClient.post(basepath & "/rulesets" & "?" & query_for_api_call, $(%CreateInboxRulesetOptions))
  constructResult[InboxRulesetDto](response)


proc deleteInboxRuleset*(httpClient: HttpClient, id: string): Response =
  ## Delete an inbox ruleset
  httpClient.delete(basepath & fmt"/rulesets/{id}")


proc deleteInboxRulesets*(httpClient: HttpClient, inboxId: string): Response =
  ## Delete inbox rulesets
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to attach ruleset to
  ])
  httpClient.delete(basepath & "/rulesets" & "?" & query_for_api_call)


proc getInboxRuleset*(httpClient: HttpClient, id: string): (Option[InboxRulesetDto], Response) =
  ## Get an inbox ruleset

  let response = httpClient.get(basepath & fmt"/rulesets/{id}")
  constructResult[InboxRulesetDto](response)


proc getInboxRulesets*(httpClient: HttpClient, inboxId: string, page: int, size: int, sort: string, searchFilter: string, since: string, before: string): (Option[PageInboxRulesetDto], Response) =
  ## List inbox rulesets
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to get rulesets from
    ("page", $page), # Optional page index in inbox ruleset list pagination
    ("size", $size), # Optional page size in inbox ruleset list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("searchFilter", $searchFilter), # Optional search filter
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/rulesets" & "?" & query_for_api_call)
  constructResult[PageInboxRulesetDto](response)


proc testInboxRuleset*(httpClient: HttpClient, id: string, InboxRulesetTestOptions: InboxRulesetTestOptions): (Option[InboxRulesetTestResult], Response) =
  ## Test an inbox ruleset
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/rulesets/{id}/test", $(%InboxRulesetTestOptions))
  constructResult[InboxRulesetTestResult](response)


proc testInboxRulesetReceiving*(httpClient: HttpClient, TestInboxRulesetReceivingOptions: TestInboxRulesetReceivingOptions): (Option[TestInboxRulesetReceivingResult], Response) =
  ## Test receiving with inbox rulesets
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/rulesets/test-receiving", $(%TestInboxRulesetReceivingOptions))
  constructResult[TestInboxRulesetReceivingResult](response)


proc testInboxRulesetSending*(httpClient: HttpClient, TestInboxRulesetSendingOptions: TestInboxRulesetSendingOptions): (Option[TestInboxRulesetSendingResult], Response) =
  ## Test sending with inbox rulesets
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/rulesets/test-sending", $(%TestInboxRulesetSendingOptions))
  constructResult[TestInboxRulesetSendingResult](response)


proc testInboxRulesetsForInbox*(httpClient: HttpClient, inboxId: string, InboxRulesetTestOptions: InboxRulesetTestOptions): (Option[InboxRulesetTestResult], Response) =
  ## Test inbox rulesets for inbox
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # ID of inbox
  ])

  let response = httpClient.put(basepath & "/rulesets" & "?" & query_for_api_call, $(%InboxRulesetTestOptions))
  constructResult[InboxRulesetTestResult](response)


proc testNewInboxRuleset*(httpClient: HttpClient, TestNewInboxRulesetOptions: TestNewInboxRulesetOptions): (Option[InboxRulesetTestResult], Response) =
  ## Test new inbox ruleset
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & "/rulesets", $(%TestNewInboxRulesetOptions))
  constructResult[InboxRulesetTestResult](response)

