#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_domain_options
import ../models/model_domain_dto
import ../models/model_domain_preview
import ../models/model_update_domain_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc addDomainWildcardCatchAll*(httpClient: HttpClient, id: string): (Option[DomainDto], Response) =
  ## Add catch all wild card inbox to domain

  let response = httpClient.post(basepath & fmt"/domains/{id}/wildcard")
  constructResult[DomainDto](response)


proc createDomain*(httpClient: HttpClient, domainOptions: CreateDomainOptions): (Option[DomainDto], Response) =
  ## Create Domain
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/domains", $(%domainOptions))
  constructResult[DomainDto](response)


proc deleteDomain*(httpClient: HttpClient, id: string): (Option[seq[string]], Response) =
  ## Delete a domain

  let response = httpClient.delete(basepath & fmt"/domains/{id}")
  constructResult[seq[string]](response)


proc getDomain*(httpClient: HttpClient, id: string): (Option[DomainDto], Response) =
  ## Get a domain

  let response = httpClient.get(basepath & fmt"/domains/{id}")
  constructResult[DomainDto](response)


proc getDomains*(httpClient: HttpClient): (Option[seq[DomainPreview]], Response) =
  ## Get domains

  let response = httpClient.get(basepath & "/domains")
  constructResult[seq[DomainPreview]](response)


proc updateDomain*(httpClient: HttpClient, id: string, updateDomainDto: UpdateDomainOptions): (Option[DomainDto], Response) =
  ## Update a domain
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/domains/{id}", $(%updateDomainDto))
  constructResult[DomainDto](response)

