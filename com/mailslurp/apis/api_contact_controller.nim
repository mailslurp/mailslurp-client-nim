#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_byte_array
import ../models/model_contact_dto
import ../models/model_contact_projection
import ../models/model_create_contact_options
import ../models/model_page_contact_projection

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createContact*(httpClient: HttpClient, createContactOptions: CreateContactOptions): (Option[ContactDto], Response) =
  ## Create a contact
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/contacts", $(%createContactOptions))
  constructResult[ContactDto](response)


proc deleteContact*(httpClient: HttpClient, contactId: string): Response =
  ## Delete contact
  httpClient.delete(basepath & fmt"/contacts/{contactId}")


proc getAllContacts*(httpClient: HttpClient, page: int, size: int, sort: string): (Option[PageContactProjection], Response) =
  ## Get all contacts
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in list pagination
    ("size", $size), # Optional page size in list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & "/contacts/paginated" & "?" & query_for_api_call)
  constructResult[PageContactProjection](response)


proc getContact*(httpClient: HttpClient, contactId: string): (Option[ContactDto], Response) =
  ## Get contact

  let response = httpClient.get(basepath & fmt"/contacts/{contactId}")
  constructResult[ContactDto](response)


proc getContactVCard*(httpClient: HttpClient, contactId: string): (Option[ByteArray], Response) =
  ## Get contact vCard vcf file

  let response = httpClient.get(basepath & fmt"/contacts/{contactId}/download")
  constructResult[ByteArray](response)


proc getContacts*(httpClient: HttpClient): (Option[seq[ContactProjection]], Response) =
  ## Get all contacts

  let response = httpClient.get(basepath & "/contacts")
  constructResult[seq[ContactProjection]](response)

