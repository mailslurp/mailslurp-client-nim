#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_connector_dto
import ../models/model_connector_sync_event_dto
import ../models/model_connector_sync_request_result
import ../models/model_create_connector_options
import ../models/model_page_connector
import ../models/model_page_connector_sync_events

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createConnector*(httpClient: HttpClient, CreateConnectorOptions: CreateConnectorOptions): (Option[ConnectorDto], Response) =
  ## Create an inbox connector
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/connectors", $(%CreateConnectorOptions))
  constructResult[ConnectorDto](response)


proc deleteConnector*(httpClient: HttpClient, id: string): Response =
  ## Delete an inbox connector
  httpClient.delete(basepath & fmt"/connectors/{id}")


proc getAllConnectorSyncEvents*(httpClient: HttpClient, page: int, size: int, sort: string, since: string, before: string): (Option[PageConnectorSyncEvents], Response) =
  ## Get all inbox connector sync events
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in connector list pagination
    ("size", $size), # Optional page size in connector list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/connectors/events" & "?" & query_for_api_call)
  constructResult[PageConnectorSyncEvents](response)


proc getConnector*(httpClient: HttpClient, id: string): (Option[ConnectorDto], Response) =
  ## Get an inbox connector

  let response = httpClient.get(basepath & fmt"/connectors/{id}")
  constructResult[ConnectorDto](response)


proc getConnectorSyncEvent*(httpClient: HttpClient, id: string): (Option[ConnectorSyncEventDto], Response) =
  ## Get an inbox connector sync event

  let response = httpClient.get(basepath & fmt"/connectors/events/{id}")
  constructResult[ConnectorSyncEventDto](response)


proc getConnectorSyncEvents*(httpClient: HttpClient, id: string, page: int, size: int, sort: string, since: string, before: string): (Option[PageConnectorSyncEvents], Response) =
  ## Get an inbox connector sync events
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in connector list pagination
    ("size", $size), # Optional page size in connector list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & fmt"/connectors/{id}/events" & "?" & query_for_api_call)
  constructResult[PageConnectorSyncEvents](response)


proc getConnectors*(httpClient: HttpClient, page: int, size: int, sort: string, since: string, before: string): (Option[PageConnector], Response) =
  ## Get inbox connectors
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in connector list pagination
    ("size", $size), # Optional page size in connector list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/connectors" & "?" & query_for_api_call)
  constructResult[PageConnector](response)


proc syncConnector*(httpClient: HttpClient, id: string): (Option[ConnectorSyncRequestResult], Response) =
  ## Sync an inbox connector

  let response = httpClient.post(basepath & fmt"/connectors/{id}/sync")
  constructResult[ConnectorSyncRequestResult](response)


proc updateConnector*(httpClient: HttpClient, id: string, CreateConnectorOptions: CreateConnectorOptions): (Option[ConnectorDto], Response) =
  ## Update an inbox connector
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/connectors/{id}", $(%CreateConnectorOptions))
  constructResult[ConnectorDto](response)

