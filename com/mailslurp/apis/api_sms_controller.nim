#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_page_sms_projection
import ../models/model_sms_message

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc deleteSmsMessage*(httpClient: HttpClient, smsId: string): Response =
  ## Delete SMS message.
  httpClient.delete(basepath & fmt"/sms/{smsId}")


proc deleteSmsMessages*(httpClient: HttpClient, phoneNumberId: string): Response =
  ## Delete all SMS messages
  let query_for_api_call = encodeQuery([
    ("phoneNumberId", $phoneNumberId), # 
  ])
  httpClient.delete(basepath & "/sms" & "?" & query_for_api_call)


proc getSmsMessage*(httpClient: HttpClient, smsId: string): (Option[SmsMessage], Response) =
  ## Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.

  let response = httpClient.get(basepath & fmt"/sms/{smsId}")
  constructResult[SmsMessage](response)


proc getSmsMessagesPaginated*(httpClient: HttpClient, phoneNumber: string, page: int, size: int, sort: string, unreadOnly: bool, since: string, before: string): (Option[PageSmsProjection], Response) =
  ## Get all SMS messages in all phone numbers in paginated form. .
  let query_for_api_call = encodeQuery([
    ("phoneNumber", $phoneNumber), # Optional receiving phone number to filter SMS messages for
    ("page", $page), # Optional page index in SMS list pagination
    ("size", $size), # Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("unreadOnly", $unreadOnly), # Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
    ("since", $since), # Optional filter SMSs received after given date time
    ("before", $before), # Optional filter SMSs received before given date time
  ])

  let response = httpClient.get(basepath & "/sms" & "?" & query_for_api_call)
  constructResult[PageSmsProjection](response)

