#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_attachment_entity
import ../models/model_attachment_meta_data
import ../models/model_byte_array
import ../models/model_download_attachment_dto
import ../models/model_page_attachment_entity
import ../models/model_upload_attachment_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc deleteAllAttachments*(httpClient: HttpClient): Response =
  ## Delete all attachments
  httpClient.delete(basepath & "/attachments")


proc deleteAttachment*(httpClient: HttpClient, attachmentId: string): Response =
  ## Delete an attachment
  httpClient.delete(basepath & fmt"/attachments/{attachmentId}")


proc downloadAttachmentAsBase64Encoded*(httpClient: HttpClient, attachmentId: string): (Option[DownloadAttachmentDto], Response) =
  ## Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.

  let response = httpClient.get(basepath & fmt"/attachments/{attachmentId}/base64")
  constructResult[DownloadAttachmentDto](response)


proc downloadAttachmentAsBytes*(httpClient: HttpClient, attachmentId: string): (Option[ByteArray], Response) =
  ## Download attachments. Get email attachment bytes. If you have trouble with byte responses try the `downloadAttachmentBase64` response endpoints.

  let response = httpClient.get(basepath & fmt"/attachments/{attachmentId}/bytes")
  constructResult[ByteArray](response)


proc getAttachment*(httpClient: HttpClient, attachmentId: string): (Option[AttachmentEntity], Response) =
  ## Get an attachment entity

  let response = httpClient.get(basepath & fmt"/attachments/{attachmentId}")
  constructResult[AttachmentEntity](response)


proc getAttachmentInfo*(httpClient: HttpClient, attachmentId: string): (Option[AttachmentMetaData], Response) =
  ## Get email attachment metadata information

  let response = httpClient.get(basepath & fmt"/attachments/{attachmentId}/metadata")
  constructResult[AttachmentMetaData](response)


proc getAttachments*(httpClient: HttpClient, fileNameFilter: string, page: int, size: int, sort: string): (Option[PageAttachmentEntity], Response) =
  ## Get email attachments
  let query_for_api_call = encodeQuery([
    ("fileNameFilter", $fileNameFilter), # Optional file name and content type search filter
    ("page", $page), # Optional page index event list pagination
    ("size", $size), # Optional page size event list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & "/attachments" & "?" & query_for_api_call)
  constructResult[PageAttachmentEntity](response)


proc uploadAttachment*(httpClient: HttpClient, uploadOptions: UploadAttachmentOptions): (Option[seq[string]], Response) =
  ## Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/attachments", $(%uploadOptions))
  constructResult[seq[string]](response)


proc uploadAttachmentBytes*(httpClient: HttpClient, contentType: string, filename: string, byteArray: ByteArray): (Option[seq[string]], Response) =
  ## Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("contentType", $contentType), # Optional contentType for file. For instance `application/pdf`
    ("filename", $filename), # Optional filename to save upload with
  ])

  let response = httpClient.post(basepath & "/attachments/bytes" & "?" & query_for_api_call, $(%byteArray))
  constructResult[seq[string]](response)


proc uploadMultipartForm*(httpClient: HttpClient, file: string, contentType: string, filename: string, x-filename: string): (Option[seq[string]], Response) =
  ## Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = encodeQuery([
    ("contentType", $contentType), # Optional content type of attachment
    ("filename", $filename), # Optional name of file
    ("x-filename", $x-filename), # Optional content type header of attachment
  ])
  let query_for_api_call = newMultipartData({
    "file": $file, # file
  })

  let response = httpClient.post(basepath & "/attachments/multipart" & "?" & query_for_api_call, multipart=query_for_api_call)
  constructResult[seq[string]](response)

