#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_inbox_replier_options
import ../models/model_inbox_replier_dto
import ../models/model_page_inbox_replier_dto
import ../models/model_page_inbox_replier_events
import ../models/model_update_inbox_replier_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createNewInboxReplier*(httpClient: HttpClient, CreateInboxReplierOptions: CreateInboxReplierOptions): (Option[InboxReplierDto], Response) =
  ## Create an inbox replier
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/repliers", $(%CreateInboxReplierOptions))
  constructResult[InboxReplierDto](response)


proc deleteInboxReplier*(httpClient: HttpClient, id: string): Response =
  ## Delete an inbox replier
  httpClient.delete(basepath & fmt"/repliers/{id}")


proc deleteInboxRepliers*(httpClient: HttpClient, inboxId: string): Response =
  ## Delete inbox repliers
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to attach replier to
  ])
  httpClient.delete(basepath & "/repliers" & "?" & query_for_api_call)


proc getInboxReplier*(httpClient: HttpClient, id: string): (Option[InboxReplierDto], Response) =
  ## Get an inbox replier

  let response = httpClient.get(basepath & fmt"/repliers/{id}")
  constructResult[InboxReplierDto](response)


proc getInboxReplierEvents*(httpClient: HttpClient, id: string, page: int, size: int, sort: string): (Option[PageInboxReplierEvents], Response) =
  ## Get an inbox replier event list
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in inbox replier event list pagination
    ("size", $size), # Optional page size in inbox replier event list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & fmt"/repliers/{id}/events" & "?" & query_for_api_call)
  constructResult[PageInboxReplierEvents](response)


proc getInboxRepliers*(httpClient: HttpClient, inboxId: string, page: int, size: int, sort: string, since: string, before: string): (Option[PageInboxReplierDto], Response) =
  ## List inbox repliers
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to get repliers from
    ("page", $page), # Optional page index in inbox replier list pagination
    ("size", $size), # Optional page size in inbox replier list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/repliers" & "?" & query_for_api_call)
  constructResult[PageInboxReplierDto](response)


proc updateInboxReplier*(httpClient: HttpClient, id: string, UpdateInboxReplierOptions: UpdateInboxReplierOptions): (Option[InboxReplierDto], Response) =
  ## Update an inbox replier
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/repliers/{id}", $(%UpdateInboxReplierOptions))
  constructResult[InboxReplierDto](response)

