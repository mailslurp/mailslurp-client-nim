#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_inbox_forwarder_options
import ../models/model_inbox_forwarder_dto
import ../models/model_inbox_forwarder_test_options
import ../models/model_inbox_forwarder_test_result
import ../models/model_page_inbox_forwarder_dto
import ../models/model_page_inbox_forwarder_events
import ../models/model_test_new_inbox_forwarder_options

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createNewInboxForwarder*(httpClient: HttpClient, inboxId: string, CreateInboxForwarderOptions: CreateInboxForwarderOptions): (Option[InboxForwarderDto], Response) =
  ## Create an inbox forwarder
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Inbox id to attach forwarder to
  ])

  let response = httpClient.post(basepath & "/forwarders" & "?" & query_for_api_call, $(%CreateInboxForwarderOptions))
  constructResult[InboxForwarderDto](response)


proc deleteInboxForwarder*(httpClient: HttpClient, id: string): Response =
  ## Delete an inbox forwarder
  httpClient.delete(basepath & fmt"/forwarders/{id}")


proc deleteInboxForwarders*(httpClient: HttpClient, inboxId: string): Response =
  ## Delete inbox forwarders
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to attach forwarder to
  ])
  httpClient.delete(basepath & "/forwarders" & "?" & query_for_api_call)


proc getInboxForwarder*(httpClient: HttpClient, id: string): (Option[InboxForwarderDto], Response) =
  ## Get an inbox forwarder

  let response = httpClient.get(basepath & fmt"/forwarders/{id}")
  constructResult[InboxForwarderDto](response)


proc getInboxForwarderEvents*(httpClient: HttpClient, id: string, page: int, size: int, sort: string): (Option[PageInboxForwarderEvents], Response) =
  ## Get an inbox forwarder event list
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in inbox forwarder event list pagination
    ("size", $size), # Optional page size in inbox forwarder event list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & fmt"/forwarders/{id}/events" & "?" & query_for_api_call)
  constructResult[PageInboxForwarderEvents](response)


proc getInboxForwarders*(httpClient: HttpClient, inboxId: string, page: int, size: int, sort: string, searchFilter: string, since: string, before: string): (Option[PageInboxForwarderDto], Response) =
  ## List inbox forwarders
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox id to get forwarders from
    ("page", $page), # Optional page index in inbox forwarder list pagination
    ("size", $size), # Optional page size in inbox forwarder list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("searchFilter", $searchFilter), # Optional search filter
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/forwarders" & "?" & query_for_api_call)
  constructResult[PageInboxForwarderDto](response)


proc testInboxForwarder*(httpClient: HttpClient, id: string, InboxForwarderTestOptions: InboxForwarderTestOptions): (Option[InboxForwarderTestResult], Response) =
  ## Test an inbox forwarder
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/forwarders/{id}/test", $(%InboxForwarderTestOptions))
  constructResult[InboxForwarderTestResult](response)


proc testInboxForwardersForInbox*(httpClient: HttpClient, inboxId: string, InboxForwarderTestOptions: InboxForwarderTestOptions): (Option[InboxForwarderTestResult], Response) =
  ## Test inbox forwarders for inbox
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # ID of inbox
  ])

  let response = httpClient.put(basepath & "/forwarders" & "?" & query_for_api_call, $(%InboxForwarderTestOptions))
  constructResult[InboxForwarderTestResult](response)


proc testNewInboxForwarder*(httpClient: HttpClient, TestNewInboxForwarderOptions: TestNewInboxForwarderOptions): (Option[InboxForwarderTestResult], Response) =
  ## Test new inbox forwarder
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.patch(basepath & "/forwarders", $(%TestNewInboxForwarderOptions))
  constructResult[InboxForwarderTestResult](response)


proc updateInboxForwarder*(httpClient: HttpClient, id: string, CreateInboxForwarderOptions: CreateInboxForwarderOptions): (Option[InboxForwarderDto], Response) =
  ## Update an inbox forwarder
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/forwarders/{id}", $(%CreateInboxForwarderOptions))
  constructResult[InboxForwarderDto](response)

