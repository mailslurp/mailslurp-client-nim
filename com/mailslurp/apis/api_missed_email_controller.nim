#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_missed_email
import ../models/model_page_missed_email_projection
import ../models/model_page_unknown_missed_email_projection

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getAllMissedEmails*(httpClient: HttpClient, page: int, size: int, sort: string, searchFilter: string, since: string, before: string, inboxId: string): (Option[PageMissedEmailProjection], Response) =
  ## Get all MissedEmails in paginated format
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in list pagination
    ("size", $size), # Optional page size in list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("searchFilter", $searchFilter), # Optional search filter
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
    ("inboxId", $inboxId), # Optional inbox ID filter
  ])

  let response = httpClient.get(basepath & "/missed-emails" & "?" & query_for_api_call)
  constructResult[PageMissedEmailProjection](response)


proc getAllUnknownMissedEmails*(httpClient: HttpClient, page: int, size: int, sort: string, searchFilter: string, since: string, before: string, inboxId: string): (Option[PageUnknownMissedEmailProjection], Response) =
  ## Get all unknown missed emails in paginated format
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in list pagination
    ("size", $size), # Optional page size in list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
    ("searchFilter", $searchFilter), # Optional search filter
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
    ("inboxId", $inboxId), # Optional inbox ID filter
  ])

  let response = httpClient.get(basepath & "/missed-emails/unknown" & "?" & query_for_api_call)
  constructResult[PageUnknownMissedEmailProjection](response)


proc getMissedEmail*(httpClient: HttpClient, missedEmailId: string): (Option[MissedEmail], Response) =
  ## Get MissedEmail

  let response = httpClient.get(basepath & fmt"/missed-emails/{missedEmailId}")
  constructResult[MissedEmail](response)


proc waitForNthMissedEmail*(httpClient: HttpClient, index: int, inboxId: string, timeout: int64, since: string, before: string): (Option[MissedEmail], Response) =
  ## Wait for Nth missed email
  let query_for_api_call = encodeQuery([
    ("inboxId", $inboxId), # Optional inbox ID filter
    ("timeout", $timeout), # Optional timeout milliseconds
    ("index", $index), # Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index=1
    ("since", $since), # Filter by created at after the given timestamp
    ("before", $before), # Filter by created at before the given timestamp
  ])

  let response = httpClient.get(basepath & "/missed-emails/waitForNthMissedEmail" & "?" & query_for_api_call)
  constructResult[MissedEmail](response)

