#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_create_tracking_pixel_options
import ../models/model_page_tracking_pixel_projection
import ../models/model_tracking_pixel_dto

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createTrackingPixel*(httpClient: HttpClient, createTrackingPixelOptions: CreateTrackingPixelOptions): (Option[TrackingPixelDto], Response) =
  ## Create tracking pixel
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tracking/pixels", $(%createTrackingPixelOptions))
  constructResult[TrackingPixelDto](response)


proc getAllTrackingPixels*(httpClient: HttpClient, page: int, searchFilter: string, size: int, sort: string): (Option[PageTrackingPixelProjection], Response) =
  ## Get tracking pixels
  let query_for_api_call = encodeQuery([
    ("page", $page), # Optional page index in list pagination
    ("searchFilter", $searchFilter), # Optional search filter
    ("size", $size), # Optional page size in list pagination
    ("sort", $sort), # Optional createdAt sort direction ASC or DESC
  ])

  let response = httpClient.get(basepath & "/tracking/pixels" & "?" & query_for_api_call)
  constructResult[PageTrackingPixelProjection](response)


proc getTrackingPixel*(httpClient: HttpClient, id: string): (Option[TrackingPixelDto], Response) =
  ## Get pixel

  let response = httpClient.get(basepath & fmt"/tracking/pixels/{id}")
  constructResult[TrackingPixelDto](response)

