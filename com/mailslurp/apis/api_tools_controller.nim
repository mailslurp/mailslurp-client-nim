#
# MailSlurp API
# 
# MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
# The version of the OpenAPI document: 6.5.2
# Contact: contact@mailslurp.dev
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_generate_bimi_record_options
import ../models/model_generate_bimi_record_results
import ../models/model_generate_dmarc_record_options
import ../models/model_generate_dmarc_record_results
import ../models/model_generate_mta_sts_record_options
import ../models/model_generate_mta_sts_record_results
import ../models/model_generate_tls_reporting_record_options
import ../models/model_generate_tls_reporting_record_results
import ../models/model_lookup_bimi_domain_options
import ../models/model_lookup_bimi_domain_results
import ../models/model_lookup_dmarc_domain_options
import ../models/model_lookup_dmarc_domain_results
import ../models/model_lookup_mta_sts_domain_options
import ../models/model_lookup_mta_sts_domain_results
import ../models/model_lookup_tls_reporting_domain_options
import ../models/model_lookup_tls_reporting_domain_results

const basepath = "https://api.mailslurp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc generateBimiRecord*(httpClient: HttpClient, GenerateBimiRecordOptions: GenerateBimiRecordOptions): (Option[GenerateBimiRecordResults], Response) =
  ## Create a BIMI record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/generate-bimi-record", $(%GenerateBimiRecordOptions))
  constructResult[GenerateBimiRecordResults](response)


proc generateDmarcRecord*(httpClient: HttpClient, GenerateDmarcRecordOptions: GenerateDmarcRecordOptions): (Option[GenerateDmarcRecordResults], Response) =
  ## Create a DMARC record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/generate-dmarc-record", $(%GenerateDmarcRecordOptions))
  constructResult[GenerateDmarcRecordResults](response)


proc generateMtaStsRecord*(httpClient: HttpClient, GenerateMtaStsRecordOptions: GenerateMtaStsRecordOptions): (Option[GenerateMtaStsRecordResults], Response) =
  ## Create a TLS reporting record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/generate-mta-sts-record", $(%GenerateMtaStsRecordOptions))
  constructResult[GenerateMtaStsRecordResults](response)


proc generateTlsReportingRecord*(httpClient: HttpClient, GenerateTlsReportingRecordOptions: GenerateTlsReportingRecordOptions): (Option[GenerateTlsReportingRecordResults], Response) =
  ## Create a TLS reporting record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/generate-tls-reporting-record", $(%GenerateTlsReportingRecordOptions))
  constructResult[GenerateTlsReportingRecordResults](response)


proc lookupBimiDomain*(httpClient: HttpClient, LookupBimiDomainOptions: LookupBimiDomainOptions): (Option[LookupBimiDomainResults], Response) =
  ## Lookup a BIMI record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/lookup-bimi-domain", $(%LookupBimiDomainOptions))
  constructResult[LookupBimiDomainResults](response)


proc lookupDmarcDomain*(httpClient: HttpClient, LookupDmarcDomainOptions: LookupDmarcDomainOptions): (Option[LookupDmarcDomainResults], Response) =
  ## Lookup a DMARC record policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/lookup-dmarc-domain", $(%LookupDmarcDomainOptions))
  constructResult[LookupDmarcDomainResults](response)


proc lookupMtaStsDomain*(httpClient: HttpClient, LookupMtaStsDomainOptions: LookupMtaStsDomainOptions): (Option[LookupMtaStsDomainResults], Response) =
  ## Lookup a MTA-STS domain policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/lookup-mta-sts-domain", $(%LookupMtaStsDomainOptions))
  constructResult[LookupMtaStsDomainResults](response)


proc lookupTlsReportingDomain*(httpClient: HttpClient, LookupTlsReportingDomainOptions: LookupTlsReportingDomainOptions): (Option[LookupTlsReportingDomainResults], Response) =
  ## Lookup a TLS reporting domain policy
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/tools/lookup-tls-reporting-domain", $(%LookupTlsReportingDomainOptions))
  constructResult[LookupTlsReportingDomainResults](response)

